{"remainingRequest":"C:\\Users\\Elisa\\ttt-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Elisa\\ttt-master\\src\\components\\Game.vue?vue&type=style&index=0&id=6ca3af22&scoped=true&lang=css&","dependencies":[{"path":"C:\\Users\\Elisa\\ttt-master\\src\\components\\Game.vue","mtime":1595395313920},{"path":"C:\\Users\\Elisa\\ttt-master\\node_modules\\css-loader\\index.js","mtime":499162500000},{"path":"C:\\Users\\Elisa\\ttt-master\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Users\\Elisa\\ttt-master\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Users\\Elisa\\ttt-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Elisa\\ttt-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.win {\n  text-align: center;\n}\n.notes {\n  font-size: 9px;\n}\n.field {\n  width: 800px;\n  height: 800px;\n  margin: 0 auto;\n}\n\n.info {\n  font-family: Roboto, sans-serif;\n  font-size: 2em;\n  position: absolute;\n  top: 3em;\n  left: 20px;\n}\n",{"version":3,"sources":["Game.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Game.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <div class=\"info\">\n      <label for=\"fname\">Scalable</label>\n      <br />\n      <input id=\"fname\" name=\"fname\" v-model=\"fieldSize\" />\n      <br />\n      <b class=\"notes\">Notes: please fill the bank with number</b>\n      <br />\n      <b class=\"notes\">example: if you input 3, make the box 3x3</b>\n      <br />\n      <h3>{{ activePlayer }}'s turn</h3>\n      <h3>Turn #{{ numTurns }}</h3>\n      <br />\n      <button @click=\"resetGame()\">Reset Game</button>\n    </div>\n    <div class=\"win\" v-if=\"!running\">\n      <h1 v-if=\"winner\">Player {{ winner }} won after {{ numTurnsForPlayer(winner) }} turns!</h1>\n      <h1 v-else>Draw!</h1>\n    </div>\n    <div class=\"field\" v-if=\"state\">\n      <template v-for=\"(row, i) in state\">\n        <Box\n          :fieldSize=\"fieldSize\"\n          :key=\"boxId(i,j)\"\n          :playerInfo=\"getPlayer(i,j)\"\n          @click.native=\"boxClicked(i,j)\"\n          v-for=\"(col, j) in row\"\n        ></Box>\n      </template>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Box from \"./Box\";\n\nexport default {\n  components: { Box },\n  data() {\n    return {\n      fieldSize: 0,\n      symbols: [\"X\", \"O\"],\n      colors: [\"#0000ff\", \"#ff0000\"],\n      activePlayer: null,\n      state: [],\n      numTurns: 0,\n      running: true,\n      winner: null\n    };\n  },\n  watch: {\n    fieldSize(oldVal, newVal) {\n      console.log(oldVal, newVal);\n      for (let i = 0; i < this.fieldSize; i++) {\n        this.state.length = this.fieldSize;\n        this.state[i] = [];\n        for (let j = 0; j < this.fieldSize; j++) {\n          this.state[i].push(\"\");\n        }\n      }\n\n      this.activePlayer = this.symbols[0];\n    }\n  },\n  methods: {\n    resetGame() {\n      this.state = [];\n      this.fieldSize = 0;\n    },\n    boxClicked(i, j) {\n      if (this.running && !this.state[i][j]) {\n        this.state[i][j] = this.activePlayer;\n\n        this.checkField();\n        this.nextPlayer();\n        this.$forceUpdate();\n\n        this.running =\n          this.running && ++this.numTurns < this.fieldSize * this.fieldSize;\n      }\n    },\n    checkIsWin(arr) {\n      arr = [...new Set(arr)];\n      let win = arr.length === 1 && arr[0] !== \"\";\n      if (win) {\n        this.winner = arr[0];\n        this.running = false;\n      }\n      return win;\n    },\n    checkRow(transposed = false) {\n      let row = this.state;\n      if (transposed) row = row.map((col, i) => this.state.map(row => row[i]));\n      for (let i = 0; i < row.length; i++) {\n        this.checkIsWin(row[i]);\n      }\n    },\n    checkDiag() {\n      this.checkIsWin(\n        [...Array(this.state.length).keys()].map(\n          i => this.state.flat()[i * this.fieldSize + i]\n        )\n      ); // left diagonal\n      this.checkIsWin(\n        [...Array(this.state.length).keys()].map(\n          i => this.state.flat()[i * this.fieldSize + this.fieldSize - i - 1]\n        )\n      ); // right diagonal\n    },\n    checkField() {\n      for (let s of this.symbols) {\n        if (this.checkRow(false) || this.checkRow(true) || this.checkDiag())\n          break;\n      }\n    },\n    nextPlayer() {\n      if (this.running) {\n        let oldIndex = this.symbols.indexOf(this.activePlayer);\n        this.activePlayer = this.symbols[\n          oldIndex + 1 < this.symbols.length ? oldIndex + 1 : 0\n        ];\n      }\n    },\n    getPlayer(i, j) {\n      let player = this.state[i][j];\n      return {\n        player,\n        color: this.colors[this.symbols.indexOf(player)]\n      };\n    },\n    boxId(i, j) {\n      return `box-${i}-${j}`;\n    },\n    numTurnsForPlayer(s) {\n      return this.state.flat().filter(x => x === s).length;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.win {\n  text-align: center;\n}\n.notes {\n  font-size: 9px;\n}\n.field {\n  width: 800px;\n  height: 800px;\n  margin: 0 auto;\n}\n\n.info {\n  font-family: Roboto, sans-serif;\n  font-size: 2em;\n  position: absolute;\n  top: 3em;\n  left: 20px;\n}\n</style>\n"]}]}