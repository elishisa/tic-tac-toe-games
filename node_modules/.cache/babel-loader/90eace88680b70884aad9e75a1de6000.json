{"remainingRequest":"C:\\Users\\Elisa\\ttt-master\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Elisa\\ttt-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Elisa\\ttt-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Elisa\\ttt-master\\src\\components\\Game.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Elisa\\ttt-master\\src\\components\\Game.vue","mtime":1595395313920},{"path":"C:\\Users\\Elisa\\ttt-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Elisa\\ttt-master\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Elisa\\ttt-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Elisa\\ttt-master\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.set\";\nimport _toConsumableArray from \"C:/Users/Elisa/ttt-master/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Box from \"./Box\";\nexport default {\n  components: {\n    Box: Box\n  },\n  data: function data() {\n    return {\n      fieldSize: 0,\n      symbols: [\"X\", \"O\"],\n      colors: [\"#0000ff\", \"#ff0000\"],\n      activePlayer: null,\n      state: [],\n      numTurns: 0,\n      running: true,\n      winner: null\n    };\n  },\n  watch: {\n    fieldSize: function fieldSize(oldVal, newVal) {\n      console.log(oldVal, newVal);\n\n      for (var i = 0; i < this.fieldSize; i++) {\n        this.state.length = this.fieldSize;\n        this.state[i] = [];\n\n        for (var j = 0; j < this.fieldSize; j++) {\n          this.state[i].push(\"\");\n        }\n      }\n\n      this.activePlayer = this.symbols[0];\n    }\n  },\n  methods: {\n    resetGame: function resetGame() {\n      this.state = [];\n      this.fieldSize = 0;\n    },\n    boxClicked: function boxClicked(i, j) {\n      if (this.running && !this.state[i][j]) {\n        this.state[i][j] = this.activePlayer;\n        this.checkField();\n        this.nextPlayer();\n        this.$forceUpdate();\n        this.running = this.running && ++this.numTurns < this.fieldSize * this.fieldSize;\n      }\n    },\n    checkIsWin: function checkIsWin(arr) {\n      arr = _toConsumableArray(new Set(arr));\n      var win = arr.length === 1 && arr[0] !== \"\";\n\n      if (win) {\n        this.winner = arr[0];\n        this.running = false;\n      }\n\n      return win;\n    },\n    checkRow: function checkRow() {\n      var _this = this;\n\n      var transposed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var row = this.state;\n      if (transposed) row = row.map(function (col, i) {\n        return _this.state.map(function (row) {\n          return row[i];\n        });\n      });\n\n      for (var i = 0; i < row.length; i++) {\n        this.checkIsWin(row[i]);\n      }\n    },\n    checkDiag: function checkDiag() {\n      var _this2 = this;\n\n      this.checkIsWin(_toConsumableArray(Array(this.state.length).keys()).map(function (i) {\n        return _this2.state.flat()[i * _this2.fieldSize + i];\n      })); // left diagonal\n\n      this.checkIsWin(_toConsumableArray(Array(this.state.length).keys()).map(function (i) {\n        return _this2.state.flat()[i * _this2.fieldSize + _this2.fieldSize - i - 1];\n      })); // right diagonal\n    },\n    checkField: function checkField() {\n      var _iterator = _createForOfIteratorHelper(this.symbols),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var s = _step.value;\n          if (this.checkRow(false) || this.checkRow(true) || this.checkDiag()) break;\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    },\n    nextPlayer: function nextPlayer() {\n      if (this.running) {\n        var oldIndex = this.symbols.indexOf(this.activePlayer);\n        this.activePlayer = this.symbols[oldIndex + 1 < this.symbols.length ? oldIndex + 1 : 0];\n      }\n    },\n    getPlayer: function getPlayer(i, j) {\n      var player = this.state[i][j];\n      return {\n        player: player,\n        color: this.colors[this.symbols.indexOf(player)]\n      };\n    },\n    boxId: function boxId(i, j) {\n      return \"box-\".concat(i, \"-\").concat(j);\n    },\n    numTurnsForPlayer: function numTurnsForPlayer(s) {\n      return this.state.flat().filter(function (x) {\n        return x === s;\n      }).length;\n    }\n  }\n};",{"version":3,"sources":["Game.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <div class=\"info\">\n      <label for=\"fname\">Scalable</label>\n      <br />\n      <input id=\"fname\" name=\"fname\" v-model=\"fieldSize\" />\n      <br />\n      <b class=\"notes\">Notes: please fill the bank with number</b>\n      <br />\n      <b class=\"notes\">example: if you input 3, make the box 3x3</b>\n      <br />\n      <h3>{{ activePlayer }}'s turn</h3>\n      <h3>Turn #{{ numTurns }}</h3>\n      <br />\n      <button @click=\"resetGame()\">Reset Game</button>\n    </div>\n    <div class=\"win\" v-if=\"!running\">\n      <h1 v-if=\"winner\">Player {{ winner }} won after {{ numTurnsForPlayer(winner) }} turns!</h1>\n      <h1 v-else>Draw!</h1>\n    </div>\n    <div class=\"field\" v-if=\"state\">\n      <template v-for=\"(row, i) in state\">\n        <Box\n          :fieldSize=\"fieldSize\"\n          :key=\"boxId(i,j)\"\n          :playerInfo=\"getPlayer(i,j)\"\n          @click.native=\"boxClicked(i,j)\"\n          v-for=\"(col, j) in row\"\n        ></Box>\n      </template>\n    </div>\n  </div>\n</template>\n\n<script>\nimport Box from \"./Box\";\n\nexport default {\n  components: { Box },\n  data() {\n    return {\n      fieldSize: 0,\n      symbols: [\"X\", \"O\"],\n      colors: [\"#0000ff\", \"#ff0000\"],\n      activePlayer: null,\n      state: [],\n      numTurns: 0,\n      running: true,\n      winner: null\n    };\n  },\n  watch: {\n    fieldSize(oldVal, newVal) {\n      console.log(oldVal, newVal);\n      for (let i = 0; i < this.fieldSize; i++) {\n        this.state.length = this.fieldSize;\n        this.state[i] = [];\n        for (let j = 0; j < this.fieldSize; j++) {\n          this.state[i].push(\"\");\n        }\n      }\n\n      this.activePlayer = this.symbols[0];\n    }\n  },\n  methods: {\n    resetGame() {\n      this.state = [];\n      this.fieldSize = 0;\n    },\n    boxClicked(i, j) {\n      if (this.running && !this.state[i][j]) {\n        this.state[i][j] = this.activePlayer;\n\n        this.checkField();\n        this.nextPlayer();\n        this.$forceUpdate();\n\n        this.running =\n          this.running && ++this.numTurns < this.fieldSize * this.fieldSize;\n      }\n    },\n    checkIsWin(arr) {\n      arr = [...new Set(arr)];\n      let win = arr.length === 1 && arr[0] !== \"\";\n      if (win) {\n        this.winner = arr[0];\n        this.running = false;\n      }\n      return win;\n    },\n    checkRow(transposed = false) {\n      let row = this.state;\n      if (transposed) row = row.map((col, i) => this.state.map(row => row[i]));\n      for (let i = 0; i < row.length; i++) {\n        this.checkIsWin(row[i]);\n      }\n    },\n    checkDiag() {\n      this.checkIsWin(\n        [...Array(this.state.length).keys()].map(\n          i => this.state.flat()[i * this.fieldSize + i]\n        )\n      ); // left diagonal\n      this.checkIsWin(\n        [...Array(this.state.length).keys()].map(\n          i => this.state.flat()[i * this.fieldSize + this.fieldSize - i - 1]\n        )\n      ); // right diagonal\n    },\n    checkField() {\n      for (let s of this.symbols) {\n        if (this.checkRow(false) || this.checkRow(true) || this.checkDiag())\n          break;\n      }\n    },\n    nextPlayer() {\n      if (this.running) {\n        let oldIndex = this.symbols.indexOf(this.activePlayer);\n        this.activePlayer = this.symbols[\n          oldIndex + 1 < this.symbols.length ? oldIndex + 1 : 0\n        ];\n      }\n    },\n    getPlayer(i, j) {\n      let player = this.state[i][j];\n      return {\n        player,\n        color: this.colors[this.symbols.indexOf(player)]\n      };\n    },\n    boxId(i, j) {\n      return `box-${i}-${j}`;\n    },\n    numTurnsForPlayer(s) {\n      return this.state.flat().filter(x => x === s).length;\n    }\n  }\n};\n</script>\n\n<style scoped>\n.win {\n  text-align: center;\n}\n.notes {\n  font-size: 9px;\n}\n.field {\n  width: 800px;\n  height: 800px;\n  margin: 0 auto;\n}\n\n.info {\n  font-family: Roboto, sans-serif;\n  font-size: 2em;\n  position: absolute;\n  top: 3em;\n  left: 20px;\n}\n</style>\n"],"sourceRoot":"src/components"}]}